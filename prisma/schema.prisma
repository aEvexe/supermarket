generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Admin {
  id                 Int     @id @default(autoincrement())
  name               String
  email              String  @unique
  hashedPassword     String
  hashedRefreshToken String?
  is_creator         Boolean
  refresh_token      String?

  @@map("admin")
}

model Manager {
  id                 Int        @id @default(autoincrement())
  name               String
  phone              String
  email              String     @unique
  hashedPassword     String
  hashedRefreshToken String?
  refresh_token      String?
  is_approved        Boolean @default(false)
  products           Product[]
  categories         Category[]
  returns            Return[]

  @@map("manager")
}

model Category {
  id          Int       @id @default(autoincrement())
  name        String
  description String
  manager_id  Int
  manager     Manager   @relation(fields: [manager_id], references: [id])
  products    Product[]

  @@map("category")
}

model Product {
  id              Int             @id @default(autoincrement())
  name            String
  manager_id      Int
  category_id     Int
  price           Decimal
  stock_quantity  Int
  barcode         String
  created_at      DateTime        @default(now())
  manager         Manager         @relation(fields: [manager_id], references: [id])
  category        Category        @relation(fields: [category_id], references: [id])
  stock_movements StockMovement[]
  discounts       Discount[]
  order_items     OrderItem[]
  returns         Return[]
  delivery_items  DeliveryItem[]

  @@map("Product")
}

model Warehouse {
  id              Int             @id @default(autoincrement())
  name            String
  location        String
  stock_movements StockMovement[]

  @@map("warehouse")
}

model StockMovement {
  id            Int       @id @default(autoincrement())
  product_id    Int
  warehouse_id  Int
  movement_type String
  quantity      Int
  date          DateTime
  expire_date   DateTime
  product       Product   @relation(fields: [product_id], references: [id])
  warehouse     Warehouse @relation(fields: [warehouse_id], references: [id])

  @@map("stockMovement")
}

model Customer {
  id                 Int         @id @default(autoincrement())
  full_name          String
  phone              String
  email              String      @unique
  hashedPassword     String?
  hashedRefreshToken String?
  refresh_token      String?
  is_active          Boolean?    @default(false)
  address            String
  activation_link    String?     @unique
  created_at         DateTime    @default(now())
  orders             Order[]
  bonus_cards        BonusCard[]

  @@map("customer")
}

model Discount {
  id            Int      @id @default(autoincrement())
  product_id    Int
  discount_type String
  value         Decimal
  start_date    DateTime
  end_date      DateTime
  product       Product  @relation(fields: [product_id], references: [id])

  @@map("discount")
}

model Order {
  id           Int         @id @default(autoincrement())
  customer_id  Int
  order_date   DateTime
  status       String
  total_amount Decimal
  customer     Customer    @relation(fields: [customer_id], references: [id])
  order_items  OrderItem[]
  payments     Payment[]
  returns      Return[]
  deliveries   Delivery[]

  @@map("order")
}

model OrderItem {
  id         Int     @id @default(autoincrement())
  order_id   Int
  product_id Int
  quantity   Int
  price      Decimal
  order      Order   @relation(fields: [order_id], references: [id])
  product    Product @relation(fields: [product_id], references: [id])

  @@map("order-item")
}

model Return {
  id          Int      @id @default(autoincrement())
  product_id  Int
  quantity    Int
  reason      String
  return_date DateTime
  manager_id  Int
  order_id    Int
  product     Product  @relation(fields: [product_id], references: [id])
  manager     Manager  @relation(fields: [manager_id], references: [id])
  order       Order    @relation(fields: [order_id], references: [id])

  @@map("return")
}

model Payment {
  id             Int      @id @default(autoincrement())
  order_id       Int
  payment_method String
  amount         Decimal
  payment_date   DateTime
  order          Order    @relation(fields: [order_id], references: [id])

  @@map("payment")
}

model BonusCard {
  id          BigInt   @id @default(autoincrement())
  customer_id Int
  card_number String
  points      Int
  created_at  DateTime @default(now())
  customer    Customer @relation(fields: [customer_id], references: [id])

  @@map("bonus-card")
}

model Delivery {
  id                  Int             @id @default(autoincrement())
  order_id            Int
  delivery_company_id Int
  status              String
  delivery_date       DateTime
  tracking_number     String
  order               Order           @relation(fields: [order_id], references: [id])
  delivery_company    DeliveryCompany @relation(fields: [delivery_company_id], references: [id])
  delivery_items      DeliveryItem[]

  @@map("delivery")
}

model DeliveryItem {
  id          Int      @id @default(autoincrement())
  delivery_id Int
  product_id  Int
  quantity    Int
  cost_price  Decimal
  delivery    Delivery @relation(fields: [delivery_id], references: [id])
  product     Product  @relation(fields: [product_id], references: [id])

  @@map("delivery-item")
}

model DeliveryCompany {
  id          Int        @id @default(autoincrement())
  name        String
  location    String
  description String
  deliveries  Delivery[]

  @@map("delivery-company")
}
